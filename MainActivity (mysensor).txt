package com.example.mysensor;

import androidx.appcompat.app.AppCompatActivity;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Point;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorEventListener2;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.view.Display;
import android.view.View;

    public class MainActivity extends AppCompatActivity implements SensorEventListener2 {
        private float xPos, xAccel, xVel = 0.0f;
        private float yPos, yAccel, yVel = 0.0f;
        private float xMax, yMax;
        private Bitmap ball;
        private SensorManager sensorManager;

        @Override
        protected void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            sensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
            //setContentView(R.layout.activity_main);
            //Create custom view
            BallView ballView = new BallView(this);
            setContentView(ballView);
//get display size (for control ball)
            Point size = new Point();
            Display display = getWindowManager().getDefaultDisplay();
            display.getSize(size);
            xMax = (float) size.x - 100;
            yMax = (float) size.y - 100;
        }

        @Override
        public void onFlushCompleted(Sensor sensor) {

        }

        public class BallView extends View {
            public BallView(Context context) {
                super(context);
                Bitmap ballSrc = BitmapFactory.decodeResource(getResources(),

                        R.drawable.ball);

                final int dstWidth = 100;
                final int dstHeight = 100;
                ball = Bitmap.createScaledBitmap(ballSrc, dstWidth, dstHeight, true);
            }

            @Override
            protected void onDraw(Canvas canvas) {
                canvas.drawBitmap(ball, xPos, yPos, null);
                invalidate();
            }
        }

        @Override
        protected void onStart() {
            super.onStart();
            sensorManager.registerListener((SensorEventListener) this,
                    sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER),
                    sensorManager.SENSOR_DELAY_GAME);
        }

        @Override
        protected void onStop() {
            sensorManager.unregisterListener((SensorEventListener) this);
            super.onStop();
        }
        @Override
        public void onSensorChanged(SensorEvent event) {
        if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {
            xAccel = event.values[0];
            yAccel = -event.values[1];
            updateBall();
        }
    }

        @Override
        public void onAccuracyChanged(Sensor sensor, int accuracy) {

        }

        private void updateBall() {
            float frameTime = 0.366f;
            xVel += (xAccel * frameTime);
            yVel += (yAccel * frameTime);
            float xS = (xVel / 2) * frameTime;
            float yS = (yVel / 2) * frameTime;
            xPos -= xS;
            yPos -= yS;
            if (xPos > xMax) {
                xPos = xMax;
            } else if (xPos < 0) {
                xPos = 0;
            }
            if (yPos > yMax) {
                yPos = yMax;
            } else if (yPos < 0) {
                yPos = 0;
            }
        }
    }

